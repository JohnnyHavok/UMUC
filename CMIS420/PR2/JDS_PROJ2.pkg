/* 
**  Author: Justin Smith
**  Course: CMIS 420.7980
**  Date:  04/19/14
**  Project 2
*/

SET SERVEROUTPUT ON

/*
**  Package: Process_Orders Specification
**  Defined By: Project 2 Specificaions
**  Purpose: Order Procedures for creating, updating, and deleting orders
**           as well as a function for getting total employee sales.
*/
CREATE OR REPLACE PACKAGE Process_Orders AS
  PROCEDURE ADD_ORDER(p_CNO IN ORDERS.CNO%TYPE,
                      p_ENO IN ORDERS.ENO%TYPE,
                      p_Recieved IN ORDERS.RECIEVED%TYPE);
  
  PROCEDURE ADD_ORDER_DETAILS(p_ONO IN ODETAILS.ONO%TYPE,
                              p_PNO IN ODETAILS.PNO%TYPE,
                              p_QTY IN ODETAILS.QTY%TYPE);
                              
  -- PROCEDURE SHIP_ORDER(p_ONO IN ORDERS.ONO%TYPE,
  --                      p_SHIPDATE IN ORDERS.SHIPPED%TYPE);
                       
  -- PROCEDURE DELETE_ORDER(p_ONO IN ORDERS.ONO%TYPE);
  
  -- FUNCTION TOTAL_EMP_SALES(p_ENO IN EMPLOYEE.ENO%TYPE) RETURN NUMBER;
END Process_Orders;
/
SHOW errors;

CREATE OR REPLACE PACKAGE BODY Process_Orders AS
  PROCEDURE ADD_ORDER(p_CNO IN ORDERS.CNO%TYPE,
                      p_ENO IN ORDERS.ENO%TYPE,
                      p_Recieved IN ORDERS.RECIEVED%TYPE)
  AS
    v_ONO             ORDERS.ONO%TYPE;
    v_Recieved        ORDERS.RECIEVED%TYPE;
    
  BEGIN
    IF p_Recieved IS NULL THEN
      v_Recieved := SYSDATE;
    ELSE
      v_Recieved := p_Recieved;
    END IF;

    v_ONO := ORDER_NUMBER_SEQ.NEXTVAL;
      
    DBMS_OUTPUT.PUT_LINE('Adding Order: '||v_ONO);

    INSERT INTO ORDERS
    (ONO, CNO, ENO, RECIEVED, SHIPPED, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_BY)
    VALUES
    (v_ONO, p_CNO, p_ENO, v_Recieved, NULL, SYSDATE, 'PKG_PROC', SYSDATE, 'PKG_PROC');
  
  END ADD_ORDER;

  PROCEDURE ADD_ORDER_DETAILS(p_ONO IN ODETAILS.ONO%TYPE,
                              p_PNO IN ODETAILS.PNO%TYPE,
                              p_QTY IN ODETAILS.QTY%TYPE)
  AS

    v_QOH       PARTS.QOH%TYPE;
    v_NEW_QTY   PARTS.QOH%TYPE;
    v_REORDER   PARTS.REORDER_LEVEL%TYPE;

  BEGIN
    -- Check QOH First --
    SELECT QOH INTO v_QOH FROM PARTS WHERE PNO = p_PNO;

    IF v_QOH > p_QTY THEN
      v_NEW_QTY := v_QOH - p_QTY;
      UPDATE PARTS SET QOH = v_NEW_QTY WHERE PNO = p_PNO;
      
      DBMS_OUTPUT.PUT_LINE('Adding Order Line: ' || p_ONO || ' ' || p_PNO || ' ' || p_QTY);

      INSERT INTO ODETAILS
      (ONO, PNO, QTY, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_BY)
      VALUES
      (p_ONO, p_PNO, p_QTY, SYSDATE, 'PKG_PROC', SYSDATE, 'PKG_PROC');

      -- Check to see if we need reorder --
      SELECT REORDER_LEVEL INTO v_REORDER FROM PARTS WHERE PNO = p_PNO;

      IF v_REORDER > v_NEW_QTY THEN
        INSERT INTO RESTOCK
        (PNO, TRANSACTION_DATE)
        VALUES
        (p_PNO, SYSDATE);
      END IF;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Not Enough QOH, Check ODETAILS_ERRORS');

      INSERT INTO ODETAILS_ERRORS
      (ONO, TRANSACTION_DATE, PNO, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, p_PNO, 'Not enough material, Asked for: ' || p_QTY || ' Only have: ' || v_QOH);
    END IF;
  END ADD_ORDER_DETAILS;

END Process_Orders;
/
SHOW errors;

