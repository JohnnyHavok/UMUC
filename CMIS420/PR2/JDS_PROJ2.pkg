/* 
**  Author: Justin Smith
**  Course: CMIS 420.7980
**  Date:  04/19/14
**  Project 2
*/

SET SERVEROUTPUT ON

/*
**  Package: Process_Orders Specification
**  Defined By: Project 2 Specificaions
**  Purpose: Order Procedures for creating, updating, and deleting orders
**           as well as a function for getting total employee sales.
*/
CREATE OR REPLACE PACKAGE Process_Orders AS
  PROCEDURE ADD_ORDER(p_CNO IN ORDERS.CNO%TYPE,
                      p_ENO IN ORDERS.ENO%TYPE,
                      p_Recieved IN ORDERS.RECIEVED%TYPE);
  
  PROCEDURE ADD_ORDER_DETAILS(p_ONO IN ODETAILS.ONO%TYPE,
                              p_PNO IN ODETAILS.PNO%TYPE,
                              p_QTY IN ODETAILS.QTY%TYPE);
                              
  PROCEDURE SHIP_ORDER(p_ONO IN ORDERS.ONO%TYPE,
                       p_SHIPDATE IN ORDERS.SHIPPED%TYPE);
                       
  PROCEDURE DELETE_ORDER(p_ONO IN ORDERS.ONO%TYPE);
  
  FUNCTION TOTAL_EMP_SALES(p_ENO IN EMPLOYEE.ENO%TYPE) RETURN NUMBER;

  E_INVALID_ENO       EXCEPTION;
  E_INVALID_CNO       EXCEPTION;
  E_INVLAID_ONO       EXCEPTION;
  E_INVLAID_PNO       EXCEPTION;
  E_INSUFFICIENT_QTY  EXCEPTION;

END Process_Orders;
/
SHOW errors;

/*
** Package: Process_Orders Body Statements
** Defined By: Process_Orders Specification Above
*/
CREATE OR REPLACE PACKAGE BODY Process_Orders AS
  -- BEGIN PROCEDURE ADD_ORDER --
  PROCEDURE ADD_ORDER(p_CNO IN ORDERS.CNO%TYPE,
                      p_ENO IN ORDERS.ENO%TYPE,
                      p_Recieved IN ORDERS.RECIEVED%TYPE)
  AS
    v_CNO             CUSTOMERS.CNO%TYPE;
    v_ENO             EMPLOYEE.ENO%TYPE;
    v_ONO             ORDERS.ONO%TYPE;
    v_Recieved        ORDERS.RECIEVED%TYPE;
    
    CURSOR cno_check(v_ID CUSTOMERS.CNO%TYPE) IS
      SELECT CNO FROM CUSTOMERS WHERE CNO = v_ID;

    CURSOR eno_check(v_ID EMPLOYEE.ENO%TYPE) IS
      SELECT ENO FROM EMPLOYEE WHERE ENO = v_ID;

  BEGIN

    v_ONO := ORDER_NUMBER_SEQ.NEXTVAL;

    -- Check CNO --
    OPEN cno_check(p_CNO);
    FETCH cno_check INTO v_CNO;

    IF cno_check%ROWCOUNT = 0 THEN
      RAISE E_INVALID_CNO;
    END IF;

    CLOSE cno_check;

    -- Check ENO -- 
    OPEN eno_check(p_ENO);
    FETCH eno_check INTO v_ENO;

    IF eno_check%ROWCOUNT = 0 THEN
      RAISE E_INVALID_ENO;
    END IF;

    CLOSE eno_check;


    IF p_Recieved IS NULL THEN
      v_Recieved := SYSDATE;
    ELSE
      v_Recieved := p_Recieved;
    END IF;
      
    DBMS_OUTPUT.PUT_LINE('Adding Order: '||v_ONO);

    INSERT INTO ORDERS
    (ONO, CNO, ENO, RECIEVED, SHIPPED, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_BY)
    VALUES
    (v_ONO, p_CNO, p_ENO, v_Recieved, NULL, SYSDATE, 'PKG_PROC', SYSDATE, 'PKG_PROC');

    -- CATCH ANY EXCEPTIONS --
    EXCEPTION
    WHEN E_INVALID_CNO THEN
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (v_ONO, SYSDATE, 'Invalid Customer Number (CNO): ' || p_CNO);
      DBMS_OUTPUT.PUT_LINE('An error occured while adding this order, check ORDER_ERRORS for details');
    WHEN E_INVALID_ENO THEN
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (v_ONO, SYSDATE, 'Invalid Employee Number (ENO): ' || p_ENO);
      DBMS_OUTPUT.PUT_LINE('An error occured while adding this order, check ORDER_ERRORS for details');
    WHEN OTHERS THEN
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (v_ONO, SYSDATE, 'An unknown error occurred while adding order: ' || v_ONO);
      DBMS_OUTPUT.PUT_LINE('An error occured while adding this order, check ORDER_ERRORS for details');
  END ADD_ORDER;
  -- END PROCEDURE ADD_ORDER --

  -- BEGIN PROCEDURE ADD_ORDER_DETAILS --
  PROCEDURE ADD_ORDER_DETAILS(p_ONO IN ODETAILS.ONO%TYPE,
                              p_PNO IN ODETAILS.PNO%TYPE,
                              p_QTY IN ODETAILS.QTY%TYPE)
  AS

    v_ONO       ORDERS.ONO%TYPE;
    v_PNO       PARTS.PNO%TYPE;
    v_QOH       PARTS.QOH%TYPE;
    v_NEW_QTY   PARTS.QOH%TYPE;
    v_REORDER   PARTS.REORDER_LEVEL%TYPE;

    CURSOR ono_check(v_ID ORDERS.ONO%TYPE) IS
      SELECT ONO FROM ORDERS WHERE ONO = v_ID;

    CURSOR pno_check(v_ID PARTS.PNO%TYPE) IS
      SELECT PNO FROM PARTS WHERE PNO = v_ID;

  BEGIN
    -- Check ONO --
    OPEN ono_check(p_ONO);
    FETCH ono_check INTO v_ONO;

    IF ono_check%ROWCOUNT = 0 THEN
      RAISE E_INVLAID_ONO;
    END IF;

    CLOSE ono_check;

    -- Check PNO --
    OPEN pno_check(p_PNO);
    FETCH pno_check INTO v_PNO;

    IF pno_check%ROWCOUNT = 0 THEN
      RAISE E_INVLAID_PNO;
    END IF;

    CLOSE pno_check;

    -- Check QOH --
    SELECT QOH INTO v_QOH FROM PARTS WHERE PNO = p_PNO;

    IF v_QOH > p_QTY THEN
      v_NEW_QTY := v_QOH - p_QTY;
      UPDATE PARTS SET QOH = v_NEW_QTY WHERE PNO = p_PNO;
      
      DBMS_OUTPUT.PUT_LINE('Adding Order Line: ' || p_ONO || ' ' || p_PNO || ' ' || p_QTY);

      INSERT INTO ODETAILS
      (ONO, PNO, QTY, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_BY)
      VALUES
      (p_ONO, p_PNO, p_QTY, SYSDATE, 'PKG_PROC', SYSDATE, 'PKG_PROC');

      -- Check to see if we need reorder --
      SELECT REORDER_LEVEL INTO v_REORDER FROM PARTS WHERE PNO = p_PNO;

      IF v_REORDER > v_NEW_QTY THEN
        INSERT INTO RESTOCK
        (PNO, TRANSACTION_DATE)
        VALUES
        (p_PNO, SYSDATE);
      END IF;

    ELSE
      RAISE E_INSUFFICIENT_QTY;
    END IF;

    EXCEPTION
    WHEN E_INSUFFICIENT_QTY THEN
      DBMS_OUTPUT.PUT_LINE('Not Enough QOH, Check ODETAILS_ERRORS');
      INSERT INTO ODETAILS_ERRORS
      (ONO, TRANSACTION_DATE, PNO, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, p_PNO, 'Not enough material, Asked for: ' || p_QTY || ' Only have: ' || v_QOH);
    WHEN E_INVLAID_ONO THEN
      DBMS_OUTPUT.PUT_LINE('Invalid Order Number, Check ODETAILS_ERRORS for more Information');
      INSERT INTO ODETAILS_ERRORS
      (ONO, TRANSACTION_DATE, PNO, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, p_PNO, 'Invalid Order Number (ONO): '|| p_ONO);
    WHEN E_INVLAID_PNO THEN
      DBMS_OUTPUT.PUT_LINE('Invalid Part Number, Check ODETAILS_ERRORS for more Information');
      INSERT INTO ODETAILS_ERRORS
      (ONO, TRANSACTION_DATE, PNO, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, p_PNO, 'Invalid Part Number (PNO): '|| p_PNO);
    WHEN OTHERS THEN
      INSERT INTO ODETAILS_ERRORS
      (ONO, TRANSACTION_DATE, PNO, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, p_PNO, 'An unknown error occurred while adding order details: ' || p_ONO);
      DBMS_OUTPUT.PUT_LINE('An error occured while adding to this order, check ODETAILS_ERRORS for details');
  END ADD_ORDER_DETAILS;
  -- END PROCEDURE ADD_ORDER_DETAILS --

  -- BEGIN PROCEDURE SHIP_ORDER --
  PROCEDURE SHIP_ORDER(p_ONO IN ORDERS.ONO%TYPE,
                       p_SHIPDATE IN ORDERS.SHIPPED%TYPE)
  AS
    v_SHIPDATE        ORDERS.SHIPPED%TYPE;
    v_ONO             ORDERS.ONO%TYPE;

    CURSOR ono_check(v_ID ORDERS.ONO%TYPE) IS
      SELECT ONO FROM ORDERS WHERE ONO = v_ID;

  BEGIN
    -- Check ONO --
    OPEN ono_check(p_ONO);
    FETCH ono_check INTO v_ONO;

    IF ono_check%ROWCOUNT = 0 THEN
      RAISE E_INVLAID_ONO;
    END IF;

    CLOSE ono_check;

    -- NULL CHECK ON SHIPDATE --
    IF p_SHIPDATE IS NULL THEN
      v_SHIPDATE := SYSDATE;
    ELSE
      v_SHIPDATE := p_SHIPDATE;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Updating Order Ship Date.  Order: ' || p_ONO || ' Date: ' || v_SHIPDATE);

    UPDATE ORDERS SET SHIPPED = v_SHIPDATE
      WHERE ONO = p_ONO;

    EXCEPTION
    WHEN E_INVLAID_ONO THEN
      DBMS_OUTPUT.PUT_LINE('Invalid Order Number, Check ORDER_ERRORS for more Information');
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, 'Cannot Ship! Invalid Order Number (ONO): '|| p_ONO);
    WHEN OTHERS THEN
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (v_ONO, SYSDATE, 'An unknown error occurred while shipping order: ' || p_ONO);
      DBMS_OUTPUT.PUT_LINE('An error occured while shipping this order, check ORDER_ERRORS for details');

  END SHIP_ORDER;
  -- END PROCEDURE SHIP_ORDER --

  -- BEGIN PROCEDURE DELETE_ORDER --
  PROCEDURE DELETE_ORDER(p_ONO IN ORDERS.ONO%TYPE)
  AS
    v_ONO             ORDERS.ONO%TYPE;

    CURSOR ono_check(v_ID ORDERS.ONO%TYPE) IS
      SELECT ONO FROM ORDERS WHERE ONO = v_ID;

  BEGIN
    -- Check ONO --
    OPEN ono_check(p_ONO);
    FETCH ono_check INTO v_ONO;

    IF ono_check%ROWCOUNT = 0 THEN
      RAISE E_INVLAID_ONO;
    END IF;

    CLOSE ono_check;

    DBMS_OUTPUT.PUT_LINE('Deleting Order: ' || p_ONO);
    DELETE FROM ORDERS WHERE ONO = p_ONO;

    EXCEPTION
    WHEN E_INVLAID_ONO THEN
      DBMS_OUTPUT.PUT_LINE('Invalid Order Number, Check ORDER_ERRORS for more Information');
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (p_ONO, SYSDATE, 'Cannot Delete! Invalid Order Number (ONO): '|| p_ONO);
    WHEN OTHERS THEN
      INSERT INTO ORDER_ERRORS
      (ONO, TRANSACTION_DATE, MESSAGE)
      VALUES
      (v_ONO, SYSDATE, 'An unknown error occurred while deleting order: ' || p_ONO);
      DBMS_OUTPUT.PUT_LINE('An error occured while deleting this order, check ORDER_ERRORS for details');

  END DELETE_ORDER;
  -- END PROCEDURE DELETE_ORDER --

  -- BEGIN FUNCTION TOTAL_EMP_SALES --
  FUNCTION TOTAL_EMP_SALES(p_ENO IN EMPLOYEE.ENO%TYPE) RETURN NUMBER
  AS

    CURSOR get_count(p_ENO EMPLOYEE.ENO%TYPE) IS
      SELECT COUNT(ENO) AS TOTAL_SALES FROM ORDERS WHERE ENO = p_ENO;

    v_ENO_Temp          EMPLOYEE.ENO%TYPE;
    v_SALES_COUNT       NUMBER;

  BEGIN 
    -- Check to see if Employee Exist --
    SELECT ENO INTO v_ENO_Temp FROM EMPLOYEE
    WHERE ENO = p_ENO;
    -- Throws NO_DATA_FOUND EXCEPTION --

    OPEN get_count(p_ENO);
    FETCH get_count INTO v_SALES_COUNT;

    DBMS_OUTPUT.PUT_LINE('Employee ID: '|| p_ENO || ' Sales Total: ' || v_SALES_COUNT);
    RETURN v_SALES_COUNT;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Employee ID: ' || p_ENO || ' does not exist');
      RETURN NULL; -- Only sensible option, can be used as a flag?
  END TOTAL_EMP_SALES;
  -- END FUNCTION TOTAL_EMP_SALES --

END Process_Orders;
/
SHOW errors;

